// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel MarchCubes
#pragma kernel ClearUnused
#include "MarchTables.compute"

// In
StructuredBuffer<float2> points;    //iso, matID
uint numPointsPerAxis;
float surfaceLevel;
uint maxTriangles;
// Out
RWByteAddressBuffer vertBuffer;
RWByteAddressBuffer indexBuffer;
// Used for counting triangles
RWStructuredBuffer<uint> triCounter;


struct CubeVertex
{
    float x;
    float y;
    float z;
    float iso;
    float materialID;
};
#define SIZEOF_FLOAT3 12
#define SIZEOF_FLOAT2 8
#define SIZEOF_UINT 4

// Writes vertex data to vertBuffer
void WriteVert(uint vertIndex, float3 pos, float3 norm, float2 uv)
{
    vertIndex *= SIZEOF_FLOAT3 * 2 + SIZEOF_FLOAT2;
    vertBuffer.Store3(vertIndex, asuint(pos));
    vertBuffer.Store3(vertIndex + SIZEOF_FLOAT3, asuint(norm));
    vertBuffer.Store2(vertIndex + SIZEOF_FLOAT3 * 2, asuint(uv));
}

// Write tri indexes to indexBuffer
//     index is of the first vertex of the tri, ie triIndex * 3
void WriteIndexes(uint index)
{
    indexBuffer.Store3(index * SIZEOF_UINT, uint3(index, index + 1, index + 2));
}

CubeVertex GetCubeVertex(int x, int y, int z)
{
    CubeVertex res;
    res.x = x;
    res.y = y;
    res.z = z;
    res.iso = points[(x * numPointsPerAxis + y) * numPointsPerAxis + z].x;
    res.materialID = points[(x * numPointsPerAxis + y) * numPointsPerAxis + z].y;
    return res;
}

float3 LerpEdge(CubeVertex v0, CubeVertex v1)
{
    float t = (surfaceLevel - v0.iso) / (v1.iso - v0.iso);
    float3 res;
    res.x = v0.x + (v1.x - v0.x) * t;
    res.y = v0.y + (v1.y - v0.y) * t;
    res.z = v0.z + (v1.z - v0.z) * t;
    return res;
}


[numthreads(4,4,4)]
void MarchCubes(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numPointsPerAxis - 1 || id.y >= numPointsPerAxis - 1 || id.z >= numPointsPerAxis - 1)
    {
        return;
    }

    CubeVertex voxel[8] =
    {
        GetCubeVertex(id.x, id.y, id.z),
        GetCubeVertex(id.x + 1, id.y, id.z),
        GetCubeVertex(id.x + 1, id.y, id.z + 1),
        GetCubeVertex(id.x, id.y, id.z + 1),
        GetCubeVertex(id.x, id.y + 1, id.z),
        GetCubeVertex(id.x + 1, id.y + 1, id.z),
        GetCubeVertex(id.x + 1, id.y + 1, id.z + 1),
        GetCubeVertex(id.x, id.y + 1, id.z + 1)
    };
    // Assume that invalid voxels must have an invalid far corner
    if (voxel[6].materialID == -1) return;
    
    int cubeIndex = 0;
    if (voxel[0].iso <= surfaceLevel) cubeIndex |= 1;
    if (voxel[1].iso <= surfaceLevel) cubeIndex |= 2;
    if (voxel[2].iso <= surfaceLevel) cubeIndex |= 4;
    if (voxel[3].iso <= surfaceLevel) cubeIndex |= 8;
    if (voxel[4].iso <= surfaceLevel) cubeIndex |= 16;
    if (voxel[5].iso <= surfaceLevel) cubeIndex |= 32;
    if (voxel[6].iso <= surfaceLevel) cubeIndex |= 64;
    if (voxel[7].iso <= surfaceLevel) cubeIndex |= 128;

    if (cubeIndex == 0 || cubeIndex == 255)
    {
        return;
    }

    for (int j = 0; triangleTable[cubeIndex][j] != -1; j += 3)
    {
        float3 pos0, pos1, pos2;
        float2 uv0, uv1, uv2;
        uint a, b;
        // Vertex 0
        a = edgeConnection[triangleTable[cubeIndex][j+2]][0];
        b = edgeConnection[triangleTable[cubeIndex][j+2]][1];
        pos0 = LerpEdge(voxel[a], voxel[b]);
        uv0 = max(voxel[a].materialID, voxel[b].materialID), 0;
        // Vertex 1
        a = edgeConnection[triangleTable[cubeIndex][j+1]][0];
        b = edgeConnection[triangleTable[cubeIndex][j+1]][1];
        pos1 = LerpEdge(voxel[a], voxel[b]);
        uv1 = max(voxel[a].materialID, voxel[b].materialID), 0;
        // Vertex 2
        a = edgeConnection[triangleTable[cubeIndex][j]][0];
        b = edgeConnection[triangleTable[cubeIndex][j]][1];
        pos2 = LerpEdge(voxel[a], voxel[b]);
        uv2 = max(voxel[a].materialID, voxel[b].materialID), 0;
        // Normal
        float3 p0 = pos1 - pos0;
        float3 p1 = pos2 - pos0;
        float3 normal;
        normal.x = (p0.y * p1.z - p1.y * p0.z);
        normal.y = (p0.x * p1.z - p1.x * p0.z) * -1;
        normal.z = (p0.x * p1.y - p1.x * p0.y);
        // Write tri to buffers
        uint count = triCounter.IncrementCounter();
        if (count >= maxTriangles) break;
        count *= 3; // tri count -> vert count
        WriteVert(count, pos0, normal, uv0);
        WriteVert(count+1, pos1, normal, uv1);
        WriteVert(count+2, pos2, normal, uv2);
        WriteIndexes(count);
    }
}

// Set all remaining tris to 0
[numthreads(64, 1, 1)]
void ClearUnused(uint id : SV_DispatchThreadID)
{
    float3 pos = 0;
    float3 normal = 0;
    float2 uv = 0;
    while (true)
    {
        uint count = triCounter.IncrementCounter();
        if (count >= maxTriangles) break;
        count *= 3; // tri count -> vert count
        WriteVert(count, pos, normal, uv);
        WriteVert(count + 1, pos, normal, uv);
        WriteVert(count + 2, pos, normal, uv);
        WriteIndexes(count);
    }
}